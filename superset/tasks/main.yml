---
# tasks file for superset

- name: Installing system dependencies for superset
  package:
    name: "{{item}}"
    state: present
  with_items:
    - "build-essential"
    - "libssl-dev"
    - "libffi-dev"
    - "python-dev"
    - "python-pip"
    - "libsasl2-dev"
    - "libldap2-dev"
  tags:
    - system_dependencies

- name: Installing pip dependencies on the system
  pip:
    name: "{{ item }}"
  with_items:
    - "virtualenv"
    - "setuptools"

- name: Create virtual env with pip dependencies for superset
  pip:
    name: "{{ item }}"
    virtualenv: "{{superset.env}}"
    state: present
  with_items:
    - "setuptools"
    - "pip"

- name: Installing pip dependencies for superset in its virtual_env
  pip:
    name: "{{item}}"
    virtualenv: "{{superset.env}}"
    state: present
  with_items:
    - "superset"
    - "cryptography"

- name: Create an admin user through the flask app-builder manager
  shell: ". ./{{superset.env}}/bin/activate && fabmanager create-admin    --app {{ superset.app }} --username {{ superset.username }} --firstname {{ superset.firstname }} --lastname {{superset.lastname}} --email {{superset.email}} --password {{superset.password}}"
  register: create_admin_output

- debug: var=create_admin_output

- name: Initialize the database
  shell: ". ./{{superset.env}}/bin/activate && superset db upgrade"

- name: Load some data to play with
  shell: ". ./{{superset.env}}/bin/activate && superset load_examples"
  when: load_examples

- name: Create default roles & permissions
  shell: ". ./{{superset.env}}/bin/activate && superset init"

- name: Run the app on a web server
  shell: ". ./{{superset.env}}/bin/activate && nohup gunicorn -w 2 --timeout 60 -b  0.0.0.0:8088 --limit-request-line 0 --limit-request-field_size 0 superset:app & > /dev/null"
  register: web_server

- debug: var=web_server

- name: Test that the superset webserver is up & healthy
  uri:
    url: "http://{{ hostvars['superset'].ansible_eth0.ipv4.address }}:{{ superset.port }}/{{ superset.healthy.url }}"
    method: GET
    return_content: yes
  register: healthy_check
  until: healthy_check.status == 200